/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

package kts.restaurant_application.services;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import kts.restaurant_application.model.RestourantTables;
import kts.restaurant_application.repositories.TableRepository;

@Service
public class TableService {
    private static final Logger logger = LoggerFactory.getLogger(TableService.class);

    private final TableRepository repository;

    @Autowired
    public TableService(TableRepository repository) {
        this.repository = repository;
    }

    public Iterable<RestourantTables> findAll() {
        return repository.findAll();
    }

    public RestourantTables findOne(Long id) {
        return repository
                .findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find Table by " + id));
    }

    public RestourantTables save(RestourantTables entity) {
        return repository.save(entity);
    }

    public RestourantTables update(RestourantTables entity){
        RestourantTables existingRestourantTables= findOne(entity.getId());

        existingRestourantTables.setFloor(entity.getFloor());
        existingRestourantTables.setPositionX(entity.getPositionX());
        existingRestourantTables.setPositionY(entity.getPositionY());
        existingRestourantTables.setState(entity.getState());
        

        return save(existingRestourantTables);
    }

    public RestourantTables delete(RestourantTables entity) {
        RestourantTables existingTable = findOne(entity.getId());
        existingTable.setIsDeleted(true);
        return save(existingTable);
    }

    public RestourantTables delete(Long id) {
        return delete(findOne(id));
    }

    public RestourantTables[] findTablesByFloor(Integer floor) {
        RestourantTables[] t = this.repository.findAllByFloor(floor);
        return t;
    }

    public Integer getNumberOfFloors() {
        Integer max = 0;
        for(RestourantTables t : this.findAll()){
            if(max < t.getFloor()){
                max = t.getFloor();
            }
        }
        return max;
    }
}