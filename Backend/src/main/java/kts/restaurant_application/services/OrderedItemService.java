/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

package kts.restaurant_application.services;


import kts.restaurant_application.model.Drink;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import kts.restaurant_application.model.OrderedItem;
import kts.restaurant_application.repositories.OrderedItemRepository;

@Service
public class OrderedItemService {
    private static final Logger logger = LoggerFactory.getLogger(OrderedItemService.class);

    private final OrderedItemRepository repository;

    @Autowired
    public OrderedItemService(OrderedItemRepository repository) {
        this.repository = repository;
    }

    public Iterable<OrderedItem> findAll() {
        return repository.findAll();
    }

    public OrderedItem findOne(Long id) {
        return repository
                .findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find OrderedItem by " + id));
    }

    public OrderedItem save(OrderedItem entity) {
        return repository.save(entity);
    }

    public OrderedItem update(OrderedItem entity){
        OrderedItem existingOrderedItem = findOne(entity.getId());

        existingOrderedItem.setItem(entity.getItem());
        existingOrderedItem.setDateTime(entity.getDateTime());
        existingOrderedItem.setNumber(entity.getNumber());
        existingOrderedItem.setStaff(entity.getStaff());
        existingOrderedItem.setStatus(entity.getStatus());
        existingOrderedItem.setNote(entity.getNote());

        return save(existingOrderedItem);
    }

    public void delete(OrderedItem entity) {
        repository.delete(entity);
    }

    public void delete(Long id) {
        delete(findOne(id));
    }
}