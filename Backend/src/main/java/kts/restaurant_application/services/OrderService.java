/*
* This code has been generated by the Rebel: a code generator for modern Java.
*
* Drop us a line or two at feedback@archetypesoftware.com: we would love to hear from you!
*/

package kts.restaurant_application.services;

import java.util.Collection;
import java.util.Date;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import kts.restaurant_application.model.Order;
import kts.restaurant_application.model.OrderedItem;
import kts.restaurant_application.repositories.OrderRepository;

@Service
public class OrderService {
    private static final Logger logger = LoggerFactory.getLogger(OrderService.class);

    private final OrderRepository repository;

    @Autowired
    public OrderService(OrderRepository repository) {
        this.repository = repository;
    }

    public Iterable<Order> findAll() {
        return repository.findAll();
    }

    public Order findOne(Long id) {
        return repository
                .findById(id)
                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND,
                        "Cannot find Order by " + id));
    }

    @Transactional
    public Order save(Order entity) {
        if (entity.getIsCompleted() == null) {
            entity.setIsCompleted(false);
        }
        Order existingOrder = this.getOrderByTable(entity.getRestourantTable().getId());

        if (existingOrder != null) {
            existingOrder.setPrice( existingOrder.getPrice() + entity.getPrice());
            for (OrderedItem item : entity.getFood()) {
                existingOrder.linkFood(item);
            }
            entity = existingOrder;
        }
        return repository.save(entity);

    }

    public Order update(Order entity) {
        Order existingOrder = findOne(entity.getId());

        existingOrder.setPrice(entity.getPrice());
        existingOrder.setWaiter(entity.getWaiter());
        existingOrder.setRestourantTable(entity.getRestourantTable());

        return repository.save(existingOrder);
    }

    public boolean delete(Order entity) {
        if (findOne(entity.getId()) != null) {
            repository.delete(entity);
            return true;
        } else {
            return false;
        }
    }

    public boolean delete(Long id) {
        return delete(findOne(id));
    }

    public Collection<Order> getOrdersByDate(Date dateFrom, Date dateTo) {
        return repository.findAllByDateTimeGreaterThanEqualAndDateTimeLessThanEqual(dateFrom, dateTo);
    }

    public Order getOrderByTable(Long id) {
        Order orders = this.repository.findByRestourantTable_idAndIsCompleted(id, false);
        return orders;
    }

    public Collection<Order> getOrdersByTable(Long id) {
        return this.repository.findAllByRestourantTable_id(id);
    }
}